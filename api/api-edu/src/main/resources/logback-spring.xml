<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <contextName>logback</contextName>

    <springProfile name="windows">
        <!--log位置-->
        <property name="log.path" value="D:/boot-logs/edu"/>
    </springProfile>

    <springProfile name="macOs">
        <!--log位置-->
        <property name="log.path" value="/Users/liukaiyu/Desktop/boot-logs/edu"/>
    </springProfile>

    <!--日志统一格式-->
    <property name="logs_pattern" value="%d{yy-MM-dd HH:mm:ss} 【%-5level】 [%thread] %logger{30} %msg%n "/>

    <!--控制台的appender-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--ThresholdFilter这个过滤器，只要设置level以上的日志, 这里决定了外面，这里如果设置了INFO
        <logger>中设置成debug的话，也不能打出debug的日志
        -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!--输出器-->
        <encoder>
            <pattern>${logs_pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--输出到文件的Appender，滚动的 ，  只要INFO级别的日志-->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--指定文件-->
        <file>${log.path}/edu-info.log</file>
        <!--LevelFilter这个过滤器，如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--输出器-->
        <encoder>
            <pattern>${logs_pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--滚动的策略，按日期，按大小-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--归档文件名-->
            <fileNamePattern>${log.path}/edu-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--文件的设置-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--文件保留几天-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!--输出到文件的Appender，滚动的 ，  只要Error级别的日志-->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--指定文件-->
        <file>${log.path}/edu-error.log</file>
        <!--LevelFilter这个过滤器，如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--输出器-->
        <encoder>
            <pattern>${logs_pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--滚动的策略，按日期，按大小 ， %i必须要加，不然报错，但是不知道%i是什么-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--归档文件名-->
            <fileNamePattern>${log.path}/edu-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--文件的设置-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--文件保留几天-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!--日志器，name是指定包名的 , 引入Appender
        意思就是：xxx包下的所有INFO往上的日志，都用上这俩Appender
        additivity一般都设置成false,
    -->
    <logger name="com.elliot" level="INFO" additivity="false">
        <appender-ref ref="INFO_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </logger>

    <!--根logger,必须有，在这里用上控制台Appender-->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
    </root>

</configuration>
